import React, { useState } from 'react';  

interface Param {  
  id: number;  
  name: string;  
  type: 'string'; // –ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–æ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å  
}  

interface ParamValue {  
  paramId: number;  
  value: string;  
}  

interface Model {  
  paramValues: ParamValue[];  
  colors?: string[];  
}  

interface Props {  
  initialParams: Param[];  
  model: Model;  
}  

const ParamEditor: React.FC<Props> = ({ initialParams, model }) => {  
  const [params, setParams] = useState<Param[]>(initialParams);  
  const [paramValues, setParamValues] = useState<{ [key: number]: string }>({  
    ...model.paramValues.reduce((obj, paramValue) => {  
      obj[paramValue.paramId] = paramValue.value;  
      return obj;  
    }, {} as { [key: number]: string })  
  });  

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  
  const [newParamName, setNewParamName] = useState('');  
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  
  const [editingParamId, setEditingParamId] = useState<number | null>(null);  

  const [tempParamName, setTempParamName] = useState<string>('');

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏  
  const getModel = (): Model => {  
    const paramValuesArray: ParamValue[] = Object.entries(paramValues).map(([key, value]) => ({  
      paramId: Number(key),  
      value: value,  
    }));  

    return {  
      paramValues: paramValuesArray,  
      colors: [],  
    };  
  };  

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è  
  const handleChange = (paramId: number, value: string) => {  
    setParamValues(prevValues => ({  
      ...prevValues,  
      [paramId]: value,  
    }));  
  };  

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  
  const handleAddParam = () => {  
    const newId = params.length > 0 ? params[params.length - 1].id + 1 : 1; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  
    const newParam: Param = {  
      id: newId,  
      name: newParamName || `–ù–µ–¥–∞–≤–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä ${newId}`, 
      type: 'string',  
    };  

    setParams(prevParams => [...prevParams, newParam]);  
    setParamValues(prevValues => ({  
      ...prevValues,  
      [newId]: '', // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  
    }));  
    setNewParamName(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  
  };  

   
  const onHandleClickEdit = (paramId: number) => {  
    setEditingParamId(paramId);  
  };  

  const onHandleClickSave = (paramId: number) => {
  
    const index = params.findIndex((param) => param.id === paramId);

    if (index !== -1) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–æ–≤—ã–º
      const updatedParams = [
        ...params.slice(0, index),
        { ...params[index], name: tempParamName },
        ...params.slice(index + 1),
      ];

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ params
      setParams(updatedParams);
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setEditingParamId(null);
  };

 

  return (  
    <div className='main'>  
      {params.map((param) => (  
        <div key={param.id} className='input-wrapper'>  
          {editingParamId === param.id ? (  
            <>
            <input  
              type="text"  
              value={tempParamName}  
              onChange={(e) => setTempParamName(e.target.value)} 
            />  
            <div onClick={() => onHandleClickSave(param.id)} className='save-button'>üñ¨</div>
            </>
          ) : (  
            <label onDoubleClick={() => {
              setEditingParamId(param.id);
              setTempParamName(param.name);
            }}>{param.name}</label> 
          )}  
          
          <div onClick={() => onHandleClickEdit(param.id)} className='edit-button'>üñâ</div>  
          <input  
            type="text"  
            value={paramValues[param.id] || ''}  
            onChange={(e) => handleChange(param.id, e.target.value)}  
          />  
        </div>  
      ))}  

      <div className='input-wrapper'>  
        <input  
          type="text"  
          value={newParamName}  
          onChange={(e) => setNewParamName(e.target.value)}  
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"  
        />  
        <button onClick={handleAddParam}>+</button>  
      </div>  
    </div>  
  );  
};  

const initialParams: Param[] = [  
  { id: 1, name: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', type: 'string' },  
  { id: 2, name: '–î–ª–∏–Ω–∞', type: 'string' },  
];  

const model: Model = {  
  paramValues: [  
    { paramId: 1, value: '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–µ' },  
    { paramId: 2, value: '–º–∞–∫—Å–∏' },  
  ],  
  colors: [],  
};  

const App: React.FC = () => {  
  return <ParamEditor initialParams={initialParams} model={model} />;  
};  

export default App;